buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'com.moowork.gradle', name: 'gradle-node-plugin', version: '1.2.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-dependency-recommender', version: '5.1.0'
        classpath group: 'org.starchartlabs.flare', name: 'flare-operations-plugins', version: '1.1.0'
        classpath group: 'org.starchartlabs.flare', name: 'flare-publishing-plugins', version: '0.3.0'
    }
}

apply plugin: 'org.starchartlabs.flare.merge-coverage-reports'

mergeCoverageReports {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
        
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
    }
}

allprojects{
    apply plugin: 'eclipse'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'org.starchartlabs.flare.dependency-insight'

    dependencyRecommendations {
        propertiesFile file: file("${rootDir}/dependencies.properties")
    }

    //Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
    version = "${coronaIdeVersion}"

    //Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
        }
    }

    repositories {
        mavenCentral()
    }

}

subprojects{
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'org.starchartlabs.flare.increase-test-logging'
    apply plugin: 'org.starchartlabs.flare.source-jars'
    
    //Configure test support sources, which can be re-used by importing projects
    configurations {
        testSupport
    }

    sourceSets {
        testSupport {
            java {
                srcDir 'src/test-support/java'
            }
            resources {
                srcDir 'src/test-support/resources'
            }
            compileClasspath += main.output
            runtimeClasspath += main.output
        }

        test{
            compileClasspath += testSupport.output
            runtimeClasspath += testSupport.output
        }
    }

    configurations.testSupportCompile.extendsFrom(configurations.compile)
    configurations.testSupportRuntime.extendsFrom(configurations.runtime)

    configurations.testSupport.extendsFrom(configurations.testSupportCompile)
    configurations.testSupport.extendsFrom(configurations.testSupportRuntime)


    task testSupportJar(type:Jar) {
        from sourceSets.testSupport.output
        classifier = 'test-support'
    }

    artifacts {
        testSupport testSupportJar
    }

    //Setup default test behavior, including failure logging
    test {
        useTestNG() {
            useDefaultListeners = true
        }
    }

}

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'com.moowork.gradle', name: 'gradle-node-plugin', version: '1.2.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-dependency-recommender', version: '3.6.3'
        classpath group: 'org.starchartlabs.flare', name: 'flare-operations-plugins', version: '0.1.0'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.4'
    id 'org.sonarqube' version '2.3'
}

apply plugin: 'org.starchartlabs.flare.merge-coverage-reports'

sonarqube {
    properties {
        property 'sonar.projectName', 'Corona IDE'
        property 'sonar.projectKey', 'org.starchartlabs.coronaide:coronaide'
        property 'sonar.organization', 'starchart-labs'
        property 'sonar.junit.reportsPath', file("${buildDir}/test-results")
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec"
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

if (project.hasProperty('sonarLogin')) {
    System.setProperty('sonar.login', "${sonarLogin}")
}

allprojects{
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'org.starchartlabs.flare.dependency-insight'

    dependencyRecommendations {
        propertiesFile file: file("${rootDir}/dependencies.properties")
    }

    //Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
    version = "${coronaIdeVersion}"
    group = 'org.starchartlabs.coronaide'

    sourceCompatibility = "${javaVersion}"

    //Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
            containers = [ "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${javaVersion}".toString() ]
        }
    }

    repositories {
        mavenCentral()
    }

}

subprojects{
    apply plugin: 'maven'
    apply plugin: 'org.starchartlabs.flare.increase-test-logging'

    //Configure test support sources, which can be re-used by importing projects
    configurations {
        testSupport
    }

    sourceSets {
        testSupport {
            java {
                srcDir 'src/test-support/java'
            }
            resources {
                srcDir 'src/test-support/resources'
            }
            compileClasspath += main.output
            runtimeClasspath += main.output
        }

        test{
            compileClasspath += testSupport.output
            runtimeClasspath += testSupport.output
        }
    }

    configurations.testSupportCompile.extendsFrom(configurations.compile)
    configurations.testSupportRuntime.extendsFrom(configurations.runtime)

    configurations.testSupport.extendsFrom(configurations.testSupportCompile)
    configurations.testSupport.extendsFrom(configurations.testSupportRuntime)


    task testSupportJar(type:Jar) {
        from sourceSets.testSupport.output
        classifier = 'test-support'
    }

    //All projects should provide source code and javadoc, and upload these with any released artifacts
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        testSupport testSupportJar

        archives sourcesJar
        archives javadocJar
    }

    //Setup default test behavior, including failure logging
    test {
        useTestNG() {
            useDefaultListeners = true
        }
    }

    sonarqube {
        properties {
            property 'sonar.projectKey', "org.starchartlabs.coronaide:corona-ide:${project.name}"
            property 'sonar.junit.reportsPath', file("${buildDir}/test-results")
            property 'sonar.core.codeCoveragePlugin', 'jacoco'
            property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec"
            properties['sonar.sources'] = sourceSets.main.java.srcDirs.findAll { it.exists() && !it.path.contains('resources') } ?: []
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}

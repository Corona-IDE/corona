allprojects{
    apply plugin: 'java'
    apply plugin: 'eclipse'
    
    //Import library version definitions
    apply from: "${rootDir}/libraries.gradle"
    
    //Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
    version = "${coronaIdeVersion}"
    group = 'com.coronaide'
    
    sourceCompatibility = "${javaVersion}"
    
    //Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
            containers = [ "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${javaVersion}" ]
        }
    }
    
    repositories {
        mavenCentral()
    }
    
    //Task which will show what the dependency set of the project is in a tree form
    task dependencyReport(type: DependencyReportTask) {}
    
    //Task which will show what is introducing a particular dependency
    task dependencyInsightReport(type: DependencyInsightReportTask) {}
}

subprojects{
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    
    //Configure test support sources, which can be re-used by importing projects
    configurations {
        testSupport
    }
    
    sourceSets {
        testSupport {
            java {
                srcDir 'src/test-support/java'
            }
            resources {
                srcDir 'src/test-support/resources'
            }
            compileClasspath += sourceSets.test.compileClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }
    
    task testSupportJar(type:Jar) {
        from sourceSets.testSupport.output
        classifier = 'test-support'
    }
    
    //All projects should provide source code and javadoc, and upload these with any released artifacts
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    artifacts {
        testSupport testSupportJar
        
        archives sourcesJar
        archives javadocJar
    }
    
    //Setup default test behavior, including failure logging
    test {
        testLogging {
            exceptionFormat 'full'

            quiet {
                events 'failed'
            }
            
            info {
                events 'skipped', 'failed', 'passed'
            }
            
            debug {
                events 'started', 'standard_out', 'standard_error', 'skipped', 'failed', 'passed'
            }
        }
        
        useTestNG() {
            useDefaultListeners = true
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}